package resolvers

import (
   "{{.Package}}/graph/models"
   "{{.Package}}/ent"
)

{{range .Nodes}}
func Notify{{.Pascals .Name}}Listenners(r *mutationResolver, event models.Event) {
	r.{{.Pascals .Name}}ListennersMutext.Lock()
	for key := range r.{{.Pascals .Name}}Listenners {
		if r.{{.Pascals .Name}}Listenners[key].Event == event {
			query := r.{{.Pascals .Name}}Listenners[key].Query
			if query == nil {
				query = &models.{{.Pascals .Name}}QueryInput{}
			}

			entities, err := r.Client.{{.Name}}.Query().Paginate(r.{{.Pascals .Name}}Listenners[key].Context, query.After, query.First, query.Before, query.Last, ent.With{{.Name}}Filter(query.Where.Filter), ent.With{{.Name}}Order(query.OrderBy))

			if err != nil {
				r.{{.Pascals .Name}}Listenners[key].Channel <- entities
			}

		}
	}
	r.{{.Pascals .Name}}ListennersMutext.Unlock()
}

func Notify{{.Name}}Listenners(r *mutationResolver, event models.Event, entity *ent.{{.Name}}) {
	r.{{.Name}}ListennersMutext.Lock()
	for key := range r.{{.Name}}Listenners {
		if r.{{.Name}}Listenners[key].Event == event && r.{{.Name}}Listenners[key].ID == entity.ID {
			r.{{.Name}}Listenners[key].Channel <- entity
		}
	}
	r.{{.Name}}ListennersMutext.Unlock()
}
{{end}}
