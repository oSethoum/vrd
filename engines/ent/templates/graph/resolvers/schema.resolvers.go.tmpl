package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"context"
	"{{.Config.Ent.Package}}/ent"
	"{{.Config.Ent.Package}}/graph/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.Client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.Client.Noders(ctx, ids)
}

{{range .Nodes}}
// {{.MultiPlural .Name}} is the resolver for the {{.MultiPlural .Name}} field.
func (r *queryResolver) {{.MultiPlural .Name}}(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.{{.Name}}Order, where *ent.{{.Name}}WhereInput) (*ent.{{.Name}}Connection, error) {
	return r.Client.{{.Name}}.Query().Paginate(ctx, after, first, before, last, ent.With{{.Name}}Order(orderBy), ent.With{{.Name}}Filter(where.Filter))
}
{{end}}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
