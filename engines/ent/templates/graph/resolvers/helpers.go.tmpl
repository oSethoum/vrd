package resolvers

import (
   "{{.Config.Ent.Package}}/graph/models"
   "{{.Config.Ent.Package}}/ent"
	{{if .Config.Ent.Debug}}
	"log"
	{{end}}
)
{{$config := .Config}}
{{range .Nodes}}
func Notify{{.Pascals .Name}}Listenners(r *mutationResolver, event models.Event) {
	r.{{.Pascals .Name}}ListennersMutext.Lock()
	for key := range r.{{.Pascals .Name}}Listenners {
		if EventIn(event, r.{{.Pascals .Name}}Listenners[key].Events) {
		   println("Client: ", key, "\nEvent: ", event)
			query := r.{{.Pascals .Name}}Listenners[key].Query
			if query == nil {
				query = &models.{{.Pascals .Name}}QueryInput{}
			}

			entities, err := r.Client.{{.Name}}.Query().Paginate(r.{{.Pascals .Name}}Listenners[key].Context, query.After, query.First, query.Before, query.Last, ent.With{{.Name}}Filter(query.Where.Filter), ent.With{{.Name}}Order(query.OrderBy))

			if err == nil {
				r.{{.Pascals .Name}}Listenners[key].Channel <- entities
				{{- if $config.Ent.Debug}}
				log.Printf("Notifying Client: %s | Event: %v | Type: {{.Pascals .Name}}", key, r.{{.Pascals .Name}}Listenners[key].Events)
				{{- end}}
			}

		}
	}
	r.{{.Pascals .Name}}ListennersMutext.Unlock()
}

func Notify{{.Name}}Listenners(r *mutationResolver, event models.Event, entity *ent.{{.Name}}) {
	r.{{.Name}}ListennersMutext.Lock()
	for key := range r.{{.Name}}Listenners {
		if EventIn(event, r.{{.Name}}Listenners[key].Events) && r.{{.Name}}Listenners[key].ID == entity.ID {
			r.{{.Name}}Listenners[key].Channel <- entity
			{{- if $config.Ent.Debug}}
			log.Printf("Notifying Client: %s | Event: %v | Type: {{.Name}}", key, r.{{.Name}}Listenners[key].Events)
			{{- end}}
		}
	}
	r.{{.Name}}ListennersMutext.Unlock()
}
{{end}}
