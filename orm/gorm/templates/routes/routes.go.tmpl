package routes

import (
	"{{.Package}}/handlers"
	"{{.Package}}/middlewares"
	"encoding/json"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/recover"
	{{- if .Debug}}
	"github.com/gofiber/fiber/v2/middleware/logger"
  {{- end}}
	{{if .Swagger}}
	swagger "github.com/arsmn/fiber-swagger/v2"
	{{end}}
	"github.com/gofiber/websocket/v2"
)

func New() *fiber.App {
	app := fiber.New(fiber.Config{
		JSONEncoder: json.Marshal,
		JSONDecoder: json.Unmarshal,
	})

	app.Use(recover.New())
  {{- if .Debug}}
	app.Use(logger.New())
  {{- end}}
	handlers.New()
  {{if .Auth}}
	app.Post("/login", handlers.Login)
	api := app.Group("/api", middlewares.Authenticated)
	{{else}}
	api := app.Group("/api")
  {{end}}
	{{if .Socket}}
	api.Get("/subscribe", websocket.New(handlers.Subscribe))
	{{end}}
	{{if .Swagger}}
	app.Get("/docs/*", swagger.HandlerDefault)
	{{end}}
	{{$g := .}}
  {{range $_, $m := .Models}}
	api.Get("/{{$g.Camels $m.Name}}/", handlers.Query{{$m.Name}})
	api.Get("/{{$g.Camels $m.Name}}/:id", handlers.One{{$m.Name}})
	api.Post("/{{$g.Camels $m.Name}}/", handlers.Create{{$m.Name}})
	api.Patch("/{{$g.Camels $m.Name}}/:id", handlers.Update{{$m.Name}})
	api.Delete("/{{$g.Camels $m.Name}}/:id", handlers.Delete{{$m.Name}})
  {{end}}
	return app
}
