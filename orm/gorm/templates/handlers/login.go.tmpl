package handlers

import (
	"{{.Package}}/config"
	"{{.Package}}/db"
	"{{.Package}}/models"
	"encoding/json"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v4"
	"golang.org/x/crypto/bcrypt"
)

type Input struct {
	Identity string `json:"identity"`
	Password string `json:"password"`
}

{{- if .Swagger}}
// @Summary Login
// @Tags    login
// @Accept  json
// @Produce json
// @Param   input body    handlers.Input true "Credentails"
// @Success 200   {object} map[string]interface{}  
// @Failure 500   {string} messgae
// @BasePath /
// @Router  /login [post]
{{- end}}
func Login(c *fiber.Ctx) error {
	input := new(Input)

	err := c.BodyParser(input)

	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}

	user := new(models.User)

	// add OR for the columns that represents identity
	if err = db.Client.Preload("Role").Where("username = ?", input.Identity).First(user).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("invalid credentails")
	}

	if err = bcrypt.CompareHashAndPassword([]byte(user.Hash), []byte(input.Password)); err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("invalid credentails")
	}

	access := make(map[string]string)
	err = json.Unmarshal(user.Role.Access, &access)

	if err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString(err.Error())
	}

	claims := jwt.MapClaims{}
	claims["exp"] = time.Now().Add(time.Hour * 24).Unix()
	claims["access"] = access

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	t, err := token.SignedString([]byte(config.Secret))

	if err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString(err.Error())
	}

	return c.JSON(fiber.Map{
		"user":  user,
		"token": t,
	})
}
