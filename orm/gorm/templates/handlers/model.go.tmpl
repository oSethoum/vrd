package handlers

import (
	"{{.Package}}/db"
	"{{.Package}}/models"
	"encoding/json"

	"github.com/gofiber/fiber/v2"
)

func Query{{.Model.Name}}(c *fiber.Ctx) error {
	many := new([]models.{{.Model.Name}})
	q := new(Query)
	c.QueryParser(q)
	ParseQuery(db.Client, q).Find(many)
	return c.JSON(many)
}

func One{{.Model.Name}}(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.SendStatus(fiber.StatusBadRequest)
	}
	q := new(Query)
	c.QueryParser(q)
	one := new(models.{{.Model.Name}})
	ParseQuery(db.Client, q).First(one, id)
	return c.JSON(one)
}

func Create{{.Model.Name}}(c *fiber.Ctx) error {
	one := new(models.{{.Model.Name}})
	err := c.BodyParser(one)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	if err = db.Client.Create(one).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	return c.JSON(one)
}

func Update{{.Model.Name}}(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	one := new(models.{{.Model.Name}})
	db.Client.Find(one, id)
	body := make(map[string]interface{})
	err = c.BodyParser(&body)
	// Update case of JOSN
	if body["access"] != nil {
		body["access"], _ = json.Marshal(body["access"])
	}
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	if err = db.Client.Model.Name(one).Omit("id").Updates(body).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	return c.Status(fiber.StatusOK).JSON(one)
}

func Delete{{.Model.Name}}(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	one := new(models.{{.Model.Name}})
	db.Client.First(one, id)
	if err = db.Client.Delete(one, id).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	return c.JSON(one)
}
