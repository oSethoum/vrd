package handlers

import (
	"{{.Package}}/db"
	"{{.Package}}/models"
	{{$l := len .Model.JsonFields}}
	{{- if gt $l 0}}
	"encoding/json"
	{{- end}}
	"github.com/gofiber/fiber/v2"
)
{{if .Swagger}}
// @Summary Query {{.Model.Name}}
// @Tags    {{.Camels .Model.Name}}
// @Accept  json
// @Produce json
// @Param   query query    handlers.ManyQuery false "Query"
// @Success 200   {array}  models.{{.Model.Name}}
// @Failure 400   {string} messgae
// @Failure 401   {string} messgae
// @Router  /{{.Camels .Model.Name}} [get]
{{- end}}
func Query{{.Model.Name}}(c *fiber.Ctx) error {
	many := new([]models.{{.Model.Name}})
	q := new(ManyQuery)
	c.QueryParser(q)
	ParseManyQuery(db.Client, q).Find(many)
	return c.JSON(many)
}
{{if .Swagger}}
// @Summary Get {{.Model.Name}}
// @Tags    {{.Camels .Model.Name}}
// @Accept  json
// @Produce json
// @Param   id  path     int true "{{.Model.Name}} ID"
// @Success 200 {object} models.{{.Model.Name}}
// @Failure 400 {string} message
// @Failure 401 {string} message
// @Router  /{{.Camels .Model.Name}}/:id [get]
{{- end}}
func One{{.Model.Name}}(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.SendStatus(fiber.StatusBadRequest)
	}
	q := new(OneQuery)
	c.QueryParser(q)
	one := new(models.{{.Model.Name}})
	ParseOneQuery(db.Client, q).First(one, id)
	return c.JSON(one)
}
{{if .Swagger}}
// @Summary Create One {{.Model.Name}}
// @Tags    {{.Camels .Model.Name}}
// @Accept  json
// @Produce json
// @Success 200 {object} models.{{.Model.Name}}
// @Failure 400 {string} message
// @Failure 401 {string} message
// @Router  /{{.Camels .Model.Name}}/ [post]
{{- end}}
func Create{{.Model.Name}}(c *fiber.Ctx) error {
	one := new(models.{{.Model.Name}})
	err := c.BodyParser(one)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	if err = db.Client.Create(one).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	return c.JSON(one)
}
{{if .Swagger}}
// @Summary Update One {{.Model.Name}}
// @Tags    {{.Camels .Model.Name}}
// @Accept  json
// @Produce json
// @Param   id  path     int true "{{.Model.Name}} ID"
// @Success 200 {object} models.{{.Model.Name}}
// @Failure 400 {string} message
// @Failure 401 {string} message
// @Router  /{{.Camels .Model.Name}}/:id [patch]
{{- end}}
func Update{{.Model.Name}}(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	one := new(models.{{.Model.Name}})
	db.Client.Find(one, id)
	body := make(map[string]interface{})
	err = c.BodyParser(&body)
	{{range .Model.JsonFields}}
	if body["{{.}}"] != nil {
		body["{{.}}"], _ = json.Marshal(body["{{.}}"])
	}
	{{end}}
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	if err = db.Client.Model(one).Omit("id").Updates(body).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	return c.Status(fiber.StatusOK).JSON(one)
}
{{if .Swagger}}
// @Summary Delete one {{.Model.Name}}
// @Tags    {{.Camel .Model.Name}}
// @Accept  json
// @Produce json
// @Param   id  path     int true "{{.Model.Name}} ID"
// @Success 200 {object} models.{{.Model.Name}}
// @Failure 400 {string} message
// @Failure 401 {string} message
// @Router  /{{.Camels .Model.Name}}/:id [delete]
{{- end}}
func Delete{{.Model.Name}}(c *fiber.Ctx) error {
	id, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	one := new(models.{{.Model.Name}})
	db.Client.First(one, id)
	if err = db.Client.Delete(one, id).Error; err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	return c.JSON(one)
}
