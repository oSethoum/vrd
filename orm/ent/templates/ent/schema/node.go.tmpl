package schema

import (
{{- range .Node.Imports}}
{{.}}
{{- end}}
)

type {{.Node.Name}} struct {
    ent.Schema
}

{{ $lenMixins := len .Node.Mixins }}{{- if gt $lenMixins 0}}
// Mixins of the {{.Node.Name}}.
func ({{.Node.Name}}) Mixin() []ent.Mixin {
	return []ent.Mixin{
		{{range $key, $value := .Node.Mixins -}}
		{{$value}}{},
		{{end}}
	}
}
{{- end}}

{{$g := .}}

{{ $lenFields := len .Node.Fields }}{{- if gt $lenFields 0}}
// Fields of the {{.Node.Name}}.
func ({{.Node.Name}}) Fields() []ent.Field {
	return []ent.Field{
		{{- range .Node.Fields}}
		field.{{.Type}}("{{.Name}}"){{$g.Join .Options "." "."}},
		{{- end}}
	}
}
{{- end}}

{{ $lenEdges := len .Node.Edges }}{{- if gt $lenEdges 0}}
// Edges of the {{.Node.Name}}.
func ({{.Node.Name}}) Edges() []ent.Edge {
	return []ent.Edge{
		{{- range .Node.Edges}}
		edge.{{.Direction}}("{{.Name}}",{{.Node}}.Type){{$g.Join .Options "." "."}}{{$g.Join .Annotations ".Annotations(" ", " ")"}},
		{{- end}}
	}
}
{{- end -}}

{{ $lenAnnotations := len .Node.Annotations }}{{- if gt $lenAnnotations 0}}
// Annotations of the .{{.Node.Name}}.
func ({{.Node.Name}}) Annotations() []schema.Annotation {
	return []schema.Annotation{
		{{- range .Node.Annotations}}
		{{.}},
		{{- end}}
	}
}
{{- end}}

{{if and .Config.Ent.Privacy .Config.Ent.PrivacyNode}}
// Policy defines the privacy policy of the {{.Node.Name}}.
func ({{.Node.Name}}) Policy() ent.Policy {
	return privacy.Policy{
		Mutation: privacy.MutationPolicy{auth.MutationPrivacy("{{.Node.Name}}")},
		Query:    privacy.QueryPolicy{auth.QueryPrivacy("{{.Node.Name}}")},
	}
}
{{end}}